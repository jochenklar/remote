#!/usr/bin/env python3
import argparse
import json
import os
import requests
import webbrowser

from http.server import HTTPServer, SimpleHTTPRequestHandler

from rauth import OAuth2Service

CONFIG_FILE = os.path.join(os.path.expanduser('~'), '.remote-config')
SESSION_FILE = os.path.join(os.path.expanduser('~'), '.remote-session')

API_URL = 'https://api.spotify.com/v1'
REDIRECT_URL = 'http://localhost:1337'


def main():
    parser = argparse.ArgumentParser(description='A remote control for spotify on the command line.')
    subparsers = parser.add_subparsers(help='actions')

    parser_init = subparsers.add_parser('init', help='initialize OAUTH2 session')
    parser_init.set_defaults(func=init)

    parser_refresh = subparsers.add_parser('refresh', help='refresh OAUTH2 session')
    parser_refresh.set_defaults(func=refresh)

    parser_search = subparsers.add_parser('search', help='search on spotfy')
    parser_search.add_argument('keyword', nargs='+', help='search keywords')
    parser_search.add_argument('-p|--play', dest='play', action='store_true', help='automatically play first song')
    parser_search.set_defaults(func=search)

    parser_me = subparsers.add_parser('me', help='show current user')
    parser_me.set_defaults(func=me)

    parser_info = subparsers.add_parser('info', help='show current track')
    parser_info.set_defaults(func=info)

    parser_devices = subparsers.add_parser('devices', help='show available devices')
    parser_devices.set_defaults(func=devices)

    parser_transfer = subparsers.add_parser('transfer', help='transfer playback to a different device')
    parser_transfer.add_argument('device', nargs='?', default=False, help='name of the device')
    parser_transfer.set_defaults(func=transfer)

    parser_play = subparsers.add_parser('play', help='start/resume playback')
    parser_play.add_argument('uri', nargs='?', default=False, help='spotify uri of what to play')
    parser_play.set_defaults(func=play)

    parser_prev = subparsers.add_parser('prev', help='skip to previous track')
    parser_prev.set_defaults(func=prev)

    parser_next = subparsers.add_parser('next', help='skip to next track')
    parser_next.set_defaults(func=next)

    parser_pause = subparsers.add_parser('pause', help='pause playback')
    parser_pause.set_defaults(func=pause)

    parser_seek = subparsers.add_parser('seek', help='seek to position')
    parser_seek.add_argument('position', help='position in seconds', type=float)
    parser_seek.set_defaults(func=seek)

    parser_volume = subparsers.add_parser('volume', help='set volume')
    parser_volume.add_argument('volume', help='volume in %%', type=float)
    parser_volume.set_defaults(func=volume)

    parser_repeat = subparsers.add_parser('repeat', help='set repeat mode')
    parser_repeat.add_argument('state', help='state of repeat mode', choices=('track', 'context', 'off'))
    parser_repeat.set_defaults(func=repeat)

    parser_shuffle = subparsers.add_parser('shuffle', help='set shuffle mode')
    parser_shuffle.add_argument('state', help='state of shuffle mode', choices=('on', 'off'))
    parser_shuffle.set_defaults(func=shuffle)

    args = parser.parse_args()
    args.func(args)
    # try:
    #     args.func(args)
    # except AttributeError:
    #     parser.print_help()

# helper functions/classes

def session_decoder(payload):
    return json.loads(payload.decode('utf-8'))

def read_config():
    return json.loads(open(CONFIG_FILE).read())

def read_session():
    return json.loads(open(SESSION_FILE).read())

def get_headers():
    return {
        'Accept': 'application/json',
        'Authorization': 'Bearer ' + read_session()['access_token']
    }

class HTTPRequestHandler(SimpleHTTPRequestHandler):

    def log_request(self, code='-', size='-'):
        pass

    def do_GET(self):
        self.server.code = self.path.split('code=')[1]

        response = b'Ok, we\'ve got the token, you can close the window now.'
        self.send_response(200)
        self.send_header("Content-type", "text/html")
        self.send_header("Content-length", len(response))
        self.end_headers()
        self.wfile.write(response)

# lower level http functions

def get(url, params=None):
    response = requests.get(API_URL + url, headers=get_headers(), params=params)
    response.raise_for_status()
    return response.json()

def post(url, params=None, data={}):
    response = requests.post(API_URL + url, headers=get_headers(), params=params, json=data)
    response.raise_for_status()

def put(url, params=None, data={}):
    response = requests.put(API_URL + url, headers=get_headers(), params=params, json=data)
    response.raise_for_status()

# higher level spotify api wrapper functions

def init(args):
    config = read_config()

    service = OAuth2Service(
        name='spotify',
        client_id=config['client_id'],
        client_secret=config['client_secret'],
        authorize_url=config['authorize_url'],
        access_token_url=config['access_token_url']
    )

    url = service.get_authorize_url(redirect_uri=REDIRECT_URL, response_type='code', scope=config['scope'])

    webbrowser.open(url)

    httpd = HTTPServer(('127.0.0.1', 1337), HTTPRequestHandler)
    httpd.handle_request()

    response = service.get_auth_session(decoder=session_decoder, data={
        'grant_type': 'authorization_code',
        'code': httpd.code,
        'redirect_uri': REDIRECT_URL
    })

    f = open(SESSION_FILE, 'w')
    f.write(json.dumps(response.access_token_response.json(), indent=4, sort_keys=True))
    f.close()
    os.chmod(SESSION_FILE, 0o600)

def refresh(args):
    config = read_config()
    session = read_session()

    service = OAuth2Service(
        name='spotify',
        client_id=config['client_id'],
        client_secret=config['client_secret'],
        authorize_url=config['authorize_url'],
        access_token_url=config['access_token_url']
    )

    session['access_token'] = service.get_access_token(decoder=session_decoder, data={
        'grant_type': 'refresh_token',
        'refresh_token': session['refresh_token']
    })

    f = open(SESSION_FILE, 'w')
    f.write(json.dumps(session, indent=4, sort_keys=True))
    f.close()
    os.chmod(SESSION_FILE, 0o600)

def search(args):
    response = get('/search', {
        'q': ' '.join(args.keyword),
        'type': 'track',
        'limit': 5
    })

    if args.play:
        put('/me/player/play', {}, {
            'uris': [response['tracks']['items'][0]['uri']]
        })
    else:
        for item in response['tracks']['items']:
            print('%(uri)s  %(name)s (%(artists)s)' % {
                'name': item['name'],
                'artists': ', '.join([artist['name'] for artist in item['artists']]),
                'uri': item['uri']
            })

def me(args):
    response = get('/me')
    print(response['id'])

def info(args):
    response = get('/me/player')
    print(response['item']['name'])
    print(', '.join([artist['name'] for artist in response['item']['artists']]))
    print(response['item']['album']['name'])

def devices(args):
    response = get('/me/player/devices')
    for device in response['devices']:
        print(device['name'], ('(active)' if device['is_active'] else ''))

def transfer(args):
    response = get('/me/player/devices')

    try:
        device_id = \
            [device['id'] for device in response['devices'] if device['name'] == args.device][0]
        put('/me/player/play', {'device_id': device_id})
    except IndexError:
        print('Device not found.')

def play(args):

    if not args.uri:
        put('/me/player/play')
    else:
        put('/me/player/play', {}, {
            'uris': [args.uri]
        })

def pause(args):
    put('/me/player/pause')

def prev(args):
    post('/me/player/previous')

def next(args):
    post('/me/player/next')

def seek(args):
    put('/me/player/seek', {'position_ms': int(args.position * 1000)})

def volume(args):
    put('/me/player/volume', {'volume_percent': args.volume})

def repeat(args):
    put('/me/player/repeat', {'state': args.state})

def shuffle(args):
    put('/me/player/shuffle', {'state': args.state == 'on'})


if __name__ == "__main__":
    main()
